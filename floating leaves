#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif
 
#include <stdlib.h>
#include <GL/glut.h>
#include <stdio.h>
 
#include <math.h>
#include <string.h>
#include <stdarg.h>
#include <time.h>
 
#define WINDOW_WIDTH  1400
#define WINDOW_HEIGHT 700
 
#define TIMER_PERIOD  10 // Period for the timer.
#define TIMER_ON       1 // 0:disable timer, 1:enable timer
 
#define D2R 0.0174532
 
// Position of leaves
#define RIGHTL 0
#define LEFTL 1
#define UPL 2
#define DOWNL 3
 
// Moving of leaves
#define RIGHTM 0
#define LEFTM 1
#define UPM 2
#define DOWNM 3
 
// Mode of playing
#define MOVING 0
#define POINTING 1
 
#define MAX_NUMBER 10 // max number of shape
#define MAX_SCORE 10 // to go to GameOver screen
 
 
//states of the game
#define WINDOW 0
#define RUN 1
#define FINISH 2
 
// outer wire radious
#define OUTER_WIRE_RADIUS 75
 
// color of shape
#define GREEN 0
#define YELLOW 1
 
/* Global Variables for Template File */
bool up = false, down = false, right = false, left = false;
int  winWidth, winHeight; // current Window width and height
 
 
int xL, yL; // center coordinate of leaf
int xM, yM; // onmove coordinate
int radiusW, radiusG;
int msx, msy; // onclick coordinate
int i;
int score;
 
bool activeTimer = false; // to start moving
 
 
 
char modeLeaves[4][10] = { "RIGHTL","LEFTL","UPL","DOWNL" };
char modePlay[2][10] = { "MOVING","POINTING" };
char modeMoving[4][10] = { "RIGHTM","LEFTM","UPM","DOWNM" };
int color[2][9] = { {229, 255, 204,102, 204, 0,178, 255, 102},{255,255,204,255,153,51,255,204,153} };
 
// initial modes
int state = WINDOW;
int modeL = RIGHTL;
int modeP = MOVING;
int modeM = RIGHTM;
int modeC = GREEN;
 
 
struct shape {
 
    int count, xCoord, yCoord;
};
 
shape leaves[10];
int r = 0, count = 0;
 
//
// to draw circle, center at (x,y)
// radius r
//
void circle(int x, int y, int r)
{
#define PI 3.1415
    float angle;
    glBegin(GL_POLYGON);
    for (int i = 0; i < 100; i++)
    {
        angle = 2 * PI * i / 100;
        glVertex2f(x + r * cos(angle), y + r * sin(angle));
    }
    glEnd();
}
 
void circle_wire(int x, int y, int r)
{
#define PI 3.1415
    float angle;
 
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < 100; i++)
    {
        angle = 2 * PI * i / 100;
        glVertex2f(x + r * cos(angle), y + r * sin(angle));
    }
    glEnd();
}
 
void print(int x, int y, const char* string, void* font)
{
    int len, i;
 
    glRasterPos2f(x, y);
    len = (int)strlen(string);
    for (i = 0; i < len; i++)
    {
        glutBitmapCharacter(font, string[i]);
    }
}
 
// display text with variables.
// vprint(-winWidth / 2 + 10, winHeight / 2 - 20, GLUT_BITMAP_8_BY_13, "ERROR: %d", numClicks);
void vprint(int x, int y, void* font, const char* string, ...)
{
    va_list ap;
    va_start(ap, string);
    char str[1024];
    vsprintf_s(str, string, ap);
    va_end(ap);
 
    int len, i;
    glRasterPos2f(x, y);
    len = (int)strlen(str);
    for (i = 0; i < len; i++)
    {
        glutBitmapCharacter(font, str[i]);
    }
}
 
// vprint2(-50, 0, 0.35, "00:%02d", timeCounter);
void vprint2(int x, int y, float size, const char* string, ...) {
    va_list ap;
    va_start(ap, string);
    char str[1024];
    vsprintf_s(str, string, ap);
    va_end(ap);
    glPushMatrix();
    glTranslatef(x, y, 0);
    glScalef(size, size, 1);
 
    int len, i;
    len = (int)strlen(str);
    for (i = 0; i < len; i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN, str[i]);
    }
    glPopMatrix();
}
 
void drawLeafRight()
{
    int i = 0;
 
    while (i < count)
    {
 
        xL = (leaves + i)->xCoord;
        yL = (leaves + i)->yCoord;
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        circle(xL, yL, radiusW);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        circle(xL, yL, radiusG);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL, yL + 32);
        glVertex2f(xL, yL - 32);
        glVertex2f(xL + 68, yL);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL, yL + 25);
        glVertex2f(xL, yL - 25);
        glVertex2f(xL + 60, yL);
        glEnd();
 
        glLineWidth(3);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glBegin(GL_LINES);
        glVertex2f(xL - 22, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 50, yL);
        glEnd();
        glLineWidth(1);
 
        glLineWidth(2);
        glBegin(GL_LINES);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL - 15, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 5, yL + 20);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 10, yL - 20);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL + 10, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 25, yL + 15);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL + 20, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 35, yL - 10);
 
        glEnd();
        glLineWidth(1);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL - 55, yL + 5);
        glVertex2f(xL - 55, yL - 5);
        glVertex2f(xL - 25, yL);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL - 50, yL + 3);
        glVertex2f(xL - 50, yL - 3);
        glVertex2f(xL - 30, yL);
        glEnd();
 
        glColor3f(0.6, 0.6, 0.6);
        circle_wire(xL + 5, yL, OUTER_WIRE_RADIUS - 8);
        circle_wire(xL + 5, yL, OUTER_WIRE_RADIUS - 7);
        circle_wire(xL + 5, yL, OUTER_WIRE_RADIUS);
 
        glColor3f(0, 0, 0);
        vprint(xL, yL, GLUT_BITMAP_9_BY_15, "%d", i + 1);
 
        i++;
    }
 
}
 
void drawLeafLeft()
{
    int i = 0;
 
    while (i < count)
    {
 
        xL = (leaves + i)->xCoord;
        yL = (leaves + i)->yCoord;
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        circle(xL, yL, radiusW);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        circle(xL, yL, radiusG);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL, yL + 32);
        glVertex2f(xL, yL - 32);
        glVertex2f(xL - 68, yL);
        glEnd();
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL, yL + 25);
        glVertex2f(xL, yL - 25);
        glVertex2f(xL - 60, yL);
        glEnd();
 
        glLineWidth(3);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glBegin(GL_LINES);
        glVertex2f(xL + 22, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 50, yL);
        glEnd();
        glLineWidth(1);
 
        glLineWidth(2);
        glBegin(GL_LINES);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL + 15, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 5, yL - 20);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 10, yL + 20);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL - 10, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 25, yL - 15);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL - 20, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 35, yL + 10);
 
        glEnd();
        glLineWidth(1);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 55, yL + 5);
        glVertex2f(xL + 55, yL - 5);
        glVertex2f(xL + 25, yL);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 50, yL + 3);
        glVertex2f(xL + 50, yL - 3);
        glVertex2f(xL + 30, yL);
        glEnd();
 
        glColor3f(0.6, 0.6, 0.6);
        circle_wire(xL - 5, yL, OUTER_WIRE_RADIUS - 8);
        circle_wire(xL - 5, yL, OUTER_WIRE_RADIUS - 7);
        circle_wire(xL - 5, yL, OUTER_WIRE_RADIUS);
 
        glColor3f(0, 0, 0);
        vprint(xL, yL, GLUT_BITMAP_9_BY_15, "%d", i + 1);
 
        i++;
    }
}
 
void drawLeafUp()
{
    int i = 0;
 
    while (i < count)
    {
 
        xL = (leaves + i)->xCoord;
        yL = (leaves + i)->yCoord;
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        circle(xL, yL, radiusW);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        circle(xL, yL, radiusG);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 32, yL);
        glVertex2f(xL - 32, yL);
        glVertex2f(xL, yL + 68);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 25, yL);
        glVertex2f(xL - 25, yL);
        glVertex2f(xL, yL + 60);
        glEnd();
 
        glLineWidth(3);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glBegin(GL_LINES);
        glVertex2f(xL, yL - 22);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL, yL + 50);
        glEnd();
        glLineWidth(1);
 
        glLineWidth(2);
        glBegin(GL_LINES);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL - 15);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 20, yL - 5);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 20, yL + 10);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL + 10);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 15, yL + 25);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL + 20);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 10, yL + 35);
 
        glEnd();
        glLineWidth(1);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 5, yL - 55);
        glVertex2f(xL - 5, yL - 55);
        glVertex2f(xL, yL - 25);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 3, yL - 50);
        glVertex2f(xL - 3, yL - 50);
        glVertex2f(xL, yL - 30);
        glEnd();
 
        glColor3f(0.6, 0.6, 0.6);
        circle_wire(xL, yL + 5, OUTER_WIRE_RADIUS - 8);
        circle_wire(xL, yL + 5, OUTER_WIRE_RADIUS - 7);
        circle_wire(xL, yL + 5, OUTER_WIRE_RADIUS);
 
        glColor3f(0, 0, 0);
        vprint(xL, yL, GLUT_BITMAP_9_BY_15, "%d", i + 1);
 
        i++;
    }
}
 
 
void drawLeafDown()
{
    int i = 0;
 
    while (i < count)
    {
 
        xL = (leaves + i)->xCoord;
        yL = (leaves + i)->yCoord;
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        circle(xL, yL, radiusW);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        circle(xL, yL, radiusG);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 32, yL);
        glVertex2f(xL - 32, yL);
        glVertex2f(xL, yL - 68);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 25, yL);
        glVertex2f(xL - 25, yL);
        glVertex2f(xL, yL - 60);
        glEnd();
 
        glLineWidth(3);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glBegin(GL_LINES);
        glVertex2f(xL, yL + 22);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL, yL - 50);
        glEnd();
        glLineWidth(1);
 
        glLineWidth(2);
        glBegin(GL_LINES);
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL + 15);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 20, yL + 5);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 20, yL - 10);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL - 10);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL + 15, yL - 25);
 
        glColor3ub(color[modeC][6], color[modeC][7], color[modeC][8]);
        glVertex2f(xL, yL - 20);
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glVertex2f(xL - 10, yL - 35);
 
        glEnd();
        glLineWidth(1);
 
        glColor3ub(color[modeC][0], color[modeC][1], color[modeC][2]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 5, yL + 55);
        glVertex2f(xL - 5, yL + 55);
        glVertex2f(xL, yL + 25);
        glEnd();
 
        glColor3ub(color[modeC][3], color[modeC][4], color[modeC][5]);
        glBegin(GL_TRIANGLES);
        glVertex2f(xL + 3, yL + 50);
        glVertex2f(xL - 3, yL + 50);
        glVertex2f(xL, yL + 30);
        glEnd();
 
        glColor3f(0.6, 0.6, 0.6);
        circle_wire(xL, yL - 5, OUTER_WIRE_RADIUS - 8);
        circle_wire(xL, yL - 5, OUTER_WIRE_RADIUS - 7);
        circle_wire(xL, yL - 5, OUTER_WIRE_RADIUS);
 
        glColor3f(0, 0, 0);
        vprint(xL, yL, GLUT_BITMAP_9_BY_15, "%d", i + 1);
 
        i++;
    }
}
 
 
void drawWindow()
{
    glColor3ub(0, 102, 51);
    glRectf(-600, 250, 600, -300);
 
    glColor3ub(255, 255, 204);
    vprint(-670, 300, GLUT_BITMAP_9_BY_15, "Score:%d", score);
    vprint(-670, 270, GLUT_BITMAP_9_BY_15, "Mause Position:%d %d", xM, yM);
 
    if (modeP == POINTING)
    {
        glColor3ub(0, 102, 51);
        glRectf(-60, 270, 30, 310);
 
    }
    if (modeP == MOVING)
    {
        glColor3ub(0, 102, 51);
        glRectf(30, 270, 110, 310);
 
    }
 
    glColor3ub(255, 255, 204);
    vprint(-50, 290, GLUT_BITMAP_9_BY_15, "POINTING");
    vprint(50, 290, GLUT_BITMAP_9_BY_15, "MOVING");
 
    glColor3ub(0, 102, 51);
    glRectf(400, 330, 630, 280);
 
    glColor3ub(255, 128, 0);
    vprint(410, 310, GLUT_BITMAP_9_BY_15, "Duygu Elif Daglaroglu");
    vprint(410, 290, GLUT_BITMAP_9_BY_15, "21801636");
}
 
void display_gameover() {
 
    if (score == MAX_SCORE)
    {
        glColor3f(1, 0.5, 0.5);
        vprint(-70, 30, GLUT_BITMAP_TIMES_ROMAN_24, "GAME OVER");
    }
 
}
 
//
// To display onto window using OpenGL commands
//
void display() {
    //
    // clear window to black
    //
    glClearColor(0.0f / 255.0f, 51.0f / 255.0f, 51.0f / 255.0f, 0);
    glClear(GL_COLOR_BUFFER_BIT);
 
    drawWindow();
 
    switch (state)
    {
    case WINDOW:drawWindow(); break;
    case RUN: {
        switch (modeL)
        {
        case RIGHTL:drawLeafRight(); break;
        case LEFTL: drawLeafLeft(); break;
        case UPL: drawLeafUp(); break;
        case DOWNL: drawLeafDown(); break;
        }
    }
    case FINISH:display_gameover(); break;
    }
 
    glutSwapBuffers();
}
 
//
// key function for ASCII charachters like ESC, a,b,c..,A,B,..Z
//
void onKeyDown(unsigned char key, int x, int y)
{
    // exit when ESC is pressed.
    if (key == 27)
        exit(0);
 
    // to refresh the window it calls display() function
    glutPostRedisplay();
}
 
void onKeyUp(unsigned char key, int x, int y)
{
    // exit when ESC is pressed.
    if (key == 27)
        exit(0);
 
    // to refresh the window it calls display() function
    glutPostRedisplay();
}
 
//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
 
void onSpecialKeyDown(int key, int x, int y)
{
    if (key == GLUT_KEY_F1)
        activeTimer = !activeTimer;
 
    if (activeTimer)
    {
        if (modeP == MOVING && state == RUN)
        {
            if (key == GLUT_KEY_RIGHT && modeM == RIGHTM)
            {
                score++;
            }
 
            if (key == GLUT_KEY_LEFT && modeM == LEFTM)
            {
                score++;
 
            }
 
 
            if (key == GLUT_KEY_UP && modeM == UPM)
            {
                score++;
            }
            if (key == GLUT_KEY_DOWN && modeM == DOWNM)
            {
                score++;
            }
 
            modeP = rand() % 2;
            modeL = rand() % 4;
            modeC = rand() % 2;
            modeM = rand() % 4;
 
        }
 
        if (modeP == POINTING && state == RUN)
        {
            if (key == GLUT_KEY_RIGHT && modeL == RIGHTL)
            {
                score++;
            }
 
            if (key == GLUT_KEY_LEFT && modeL == LEFTL)
            {
                score++;
 
            }
 
 
            if (key == GLUT_KEY_UP && modeL == UPL)
            {
                score++;
            }
            if (key == GLUT_KEY_DOWN && modeL == DOWNL)
            {
                score++;
            }
 
            modeP = rand() % 2;
            modeL = rand() % 4;
            modeC = rand() % 2;
            modeM = rand() % 4;
 
        }
    }
 
    if (score == MAX_SCORE)
    {
        activeTimer = !activeTimer;
        state = FINISH;
    }
 
 
    // Write your codes here.
    switch (key) {
    case GLUT_KEY_UP: up = true; break;
    case GLUT_KEY_DOWN: down = true; break;
    case GLUT_KEY_LEFT: left = true; break;
    case GLUT_KEY_RIGHT: right = true; break;
    }
 
    // to refresh the window it calls display() function
    glutPostRedisplay();
}
 
//
// Special Key like GLUT_KEY_F1, F2, F3,...
// Arrow Keys, GLUT_KEY_UP, GLUT_KEY_DOWN, GLUT_KEY_RIGHT, GLUT_KEY_RIGHT
//
void onSpecialKeyUp(int key, int x, int y)
{
    // Write your codes here.
    switch (key) {
    case GLUT_KEY_UP: up = false; break;
    case GLUT_KEY_DOWN: down = false; break;
    case GLUT_KEY_LEFT: left = false; break;
    case GLUT_KEY_RIGHT: right = false; break;
    }
 
    // to refresh the window it calls display() function
    glutPostRedisplay();
}
 
 
 
 
int isOverlap()
{
    int b = 0;
    int sum = 0;
 
    for (int s = 0; s < count; s++)
    {
        b = (msx <= leaves[s].xCoord - 70 || msx >= leaves[s].xCoord + 70);
        sum += b;
    }
 
    if (sum == count)
        return(1);
 
    return(0);
}
 
//
// When a click occurs in the window,
// It provides which button
// buttons : GLUT_LEFT_BUTTON , GLUT_RIGHT_BUTTON
// states  : GLUT_UP , GLUT_DOWN
// x, y is the coordinate of the point that mouse clicked.
//
void onClick(int button, int stat, int x, int y)
{
    msx = x - winWidth / 2;
    msy = winHeight / 2 - y;
 
    if (button == GLUT_LEFT_BUTTON && stat == GLUT_DOWN)
    {
 
        if (msx<550 && msx>-550 && msy > -300 && msy < 300)
        {
            if (r == 0) {
                (leaves + r)->xCoord = msx;
                (leaves + r)->yCoord = msy;
                (leaves + r)->count = count;
                count++;
                r++;
                state = RUN;
 
            }
 
            else if (r > 0 && isOverlap() && count < MAX_NUMBER)
            {
 
                (leaves + r)->xCoord = msx;
                (leaves + r)->yCoord = msy;
                (leaves + r)->count = count;
                r++;
                count++;
                state = RUN;
            }
        }
 
    }
 
    // to refresh the window it calls display() function
    glutPostRedisplay();
}
 
 
//
// This function is called when the window size changes.
// w : is the new width of the window in pixels.
// h : is the new height of the window in pixels.
//
void onResize(int w, int h)
{
    winWidth = w;
    winHeight = h;
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-w / 2, w / 2, -h / 2, h / 2, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    display(); // refresh window.
}
 
void onMoveDown(int x, int y) {
    // Write your codes here.
 
 
 
    // to refresh the window it calls display() function  
    glutPostRedisplay();
}
 
// GLUT to OpenGL coordinate conversion:
//   x2 = x1 - winWidth / 2
//   y2 = winHeight / 2 - y1
void onMove(int x, int y) {
 
 
    xM = x - winWidth / 2;
    yM = winHeight / 2 - y;
 
    // to refresh the window it calls display() function
    glutPostRedisplay();
}
void MoveRight()
{
    int k = 0;
    while (k < count)
    {
        if ((leaves + k)->xCoord + 75 < 600)
            (leaves + k)->xCoord++;
        else
            (leaves + k)->xCoord = -520;
        ++k;
    }
}
 
void MoveLeft()
{
    int k = 0;
    while (k < count)
    {
        if ((leaves + k)->xCoord - 75 > -600)
            (leaves + k)->xCoord--;
        else
            (leaves + k)->xCoord = +520;
        ++k;
    }
}
 
void MoveUp()
{
    int k = 0;
    while (k < count)
    {
        if ((leaves + k)->yCoord + 75 < 300)
            (leaves + k)->yCoord++;
        else
            (leaves + k)->yCoord = -300;
        ++k;
    }
}
 
void MoveDown()
{
    int k = 0;
    while (k < count)
    {
        if ((leaves + k)->yCoord - 75 > -300)
            (leaves + k)->yCoord--;
        else
            (leaves + k)->yCoord = 250;
        ++k;
    }
}
 
 
#if TIMER_ON == 1
void onTimer(int v) {
 
    glutTimerFunc(TIMER_PERIOD, onTimer, 0);
 
    if (activeTimer) {
 
        switch (modeM) {
 
        case RIGHTM: MoveRight(); break;
        case LEFTM: MoveLeft(); break;
        case UPM: MoveUp(); break;
        case DOWNM: MoveDown(); break;
        }
 
    }
 
    // to refresh the window it calls display() function
    glutPostRedisplay(); // display()
 
}
#endif
 
void initGlobals()
{
    score = 0;
    xM = -650;
    yM = -350;
    i = 0;
    r = 0;
    count = 0;
    xL = -750;
    yL = -450;
    leaves[10];
    radiusW = 30;
    radiusG = 25;
 
}
 
void Init() {
    // Smoothing shapes
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    initGlobals();
    srand(time(NULL));
}
 
void main(int argc, char* argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    //glutInitWindowPosition(100, 100);
    glutCreateWindow("DRIFTING LEAVES");
 
    glutDisplayFunc(display);
    glutReshapeFunc(onResize);
 
    //
    // keyboard registration
    //
    glutKeyboardFunc(onKeyDown);
    glutSpecialFunc(onSpecialKeyDown);
 
    glutKeyboardUpFunc(onKeyUp);
    glutSpecialUpFunc(onSpecialKeyUp);
 
    //
    // mouse registration
    //
    glutMouseFunc(onClick);
    glutMotionFunc(onMoveDown);
    glutPassiveMotionFunc(onMove);
 
    // for (int s = 0; s < 10; s++)
      //   printf("%d.%d X %d\n", (leaves + s)->count, (leaves + s)->xCoord, (leaves + s)->yCoord);
 
#if  TIMER_ON == 1
    // timer event
    glutTimerFunc(TIMER_PERIOD, onTimer, 0);
#endif
 
    Init();
 
    glutMainLoop();
 
 
}
 
 
